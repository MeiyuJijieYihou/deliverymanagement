<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhaofeng.deliverymanagement.repository.OrdersMapper">
  <resultMap id="BaseResultMap" type="com.zhaofeng.deliverymanagement.model.entity.Orders">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="customer_id" jdbcType="INTEGER" property="customerId" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="cement_id" jdbcType="INTEGER" property="cementId" />
    <result column="unit_price" jdbcType="DOUBLE" property="unitPrice" />
    <result column="num" jdbcType="DOUBLE" property="num" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="delivery_id" jdbcType="INTEGER" property="deliveryId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    id, customer_id, address_id, cement_id, unit_price, num, created_time, user_id, delivery_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    select 
    <include refid="Base_Column_List" />
    from orders
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    delete from orders
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zhaofeng.deliverymanagement.model.entity.Orders">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    insert into orders (id, customer_id, address_id, 
      cement_id, unit_price, num, 
      created_time, user_id, delivery_id
      )
    values (#{id,jdbcType=INTEGER}, #{customerId,jdbcType=INTEGER}, #{addressId,jdbcType=INTEGER}, 
      #{cementId,jdbcType=INTEGER}, #{unitPrice,jdbcType=DOUBLE}, #{num,jdbcType=DOUBLE}, 
      #{createdTime,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER}, #{deliveryId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zhaofeng.deliverymanagement.model.entity.Orders">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="addressId != null">
        address_id,
      </if>
      <if test="cementId != null">
        cement_id,
      </if>
      <if test="unitPrice != null">
        unit_price,
      </if>
      <if test="num != null">
        num,
      </if>

        created_time,

      <if test="userId != null">
        user_id,
      </if>
      <if test="deliveryId != null">
        delivery_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="cementId != null">
        #{cementId,jdbcType=INTEGER},
      </if>
      <if test="unitPrice != null">
        #{unitPrice,jdbcType=DOUBLE},
      </if>
      <if test="num != null">
        #{num,jdbcType=DOUBLE},
      </if>
        now(),
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="deliveryId != null">
        #{deliveryId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zhaofeng.deliverymanagement.model.entity.Orders">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    update orders
    <set>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
      <if test="cementId != null">
        cement_id = #{cementId,jdbcType=INTEGER},
      </if>
      <if test="unitPrice != null">
        unit_price = #{unitPrice,jdbcType=DOUBLE},
      </if>
      <if test="num != null">
        num = #{num,jdbcType=DOUBLE},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="deliveryId != null">
        delivery_id = #{deliveryId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zhaofeng.deliverymanagement.model.entity.Orders">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 25 08:27:00 CST 2019.
    -->
    update orders
    set customer_id = #{customerId,jdbcType=INTEGER},
      address_id = #{addressId,jdbcType=INTEGER},
      cement_id = #{cementId,jdbcType=INTEGER},
      unit_price = #{unitPrice,jdbcType=DOUBLE},
      num = #{num,jdbcType=DOUBLE},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      delivery_id = #{deliveryId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <!-- 订单详情 -->
  <resultMap id="OrdersDetailMap" type="OrdersPojo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <!--<result column="customer_id" jdbcType="INTEGER" property="customerId" />-->

    <!--<result column="address_id" jdbcType="INTEGER" property="addressId" />-->

    <!--<result column="cement_id" jdbcType="INTEGER" property="cementId" />-->

    <result column="unit_price" jdbcType="DOUBLE" property="unitPrice" />
    <result column="num" jdbcType="DOUBLE" property="num" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <!--<result column="user_id" jdbcType="INTEGER" property="userId" />-->
    <result column="delivery_id" jdbcType="INTEGER" property="deliveryId" />

    <!-- 需要用到sql语句中的customer_id -->
    <association javaType="com.zhaofeng.deliverymanagement.model.entity.User" property="customer"
                 column="customer_id" select="com.zhaofeng.deliverymanagement.repository.UserMapper.selectByPrimaryKey">
    </association>
    <!-- 需要用到sql语句中的address_id -->
    <association javaType="com.zhaofeng.deliverymanagement.model.entity.Address" property="address"
                 column="address_id" select="com.zhaofeng.deliverymanagement.repository.AddressMapper.selectByPrimaryKey">
    </association>
    <!-- 需要用到sql语句中的cement_id -->
    <association javaType="com.zhaofeng.deliverymanagement.model.entity.Cement" property="cement"
                 column="cement_id" select="com.zhaofeng.deliverymanagement.repository.CementMapper.selectByPrimaryKey">
    </association>
  </resultMap>

  <!--&lt;!&ndash; 订单详情 &ndash;&gt;-->
  <!--<resultMap id="OrdersDetailMap" type="OrdersPojo">-->
    <!--<id column="id" jdbcType="INTEGER" property="id" />-->
    <!--<result column="customer_name" jdbcType="INTEGER" property="customerName" />-->

    <!--<result column="address_name" jdbcType="INTEGER" property="addressName" />-->

    <!--<result column="cement_name" jdbcType="INTEGER" property="cementName" />-->

    <!--<result column="unit_price" jdbcType="DOUBLE" property="unitPrice" />-->
    <!--<result column="num" jdbcType="DOUBLE" property="num" />-->
    <!--<result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />-->
    <!--<result column="user_id" jdbcType="INTEGER" property="userId" />-->
    <!--<result column="delivery_id" jdbcType="INTEGER" property="deliveryId" />-->

  <!--</resultMap>-->

  <!-- 根据用户id获取所有订单 -->
    <select id="selectOrdersByUserId" resultType="OrdersPojo" parameterType="java.lang.Integer">
    select o.id, realname as customerName, address_name as address_name, name as cement_name, unit_price , num, created_time, delivery_id
    from orders o, user u, address a, cement c
    where o.customer_id = u.id
    and o.address_id = a.id
    and o.cement_id = c.id
    and o.user_id = #{userId}
    order by created_time desc
  </select>



  <!--&lt;!&ndash; 根据用户id获取所有订单 &ndash;&gt;-->
  <!--<select id="selectOrdersByUserId" resultMap="OrdersDetailMap" parameterType="java.lang.Integer">-->
    <!--select id, customer_id, address_id, cement_id, unit_price, num, created_time, user_id, delivery_id-->
    <!--from orders-->
    <!--where user_id = #{userId}-->
  <!--</select>-->

  <!-- 根据用户id获取未完成订单 -->
  <!--<select id="selectUncompletedOrdersByUserId" parameterType="java.lang.Integer" resultMap="OrdersDetailMap">-->
    <!--select id, customer_id, address_id, cement_id, unit_price, num, created_time, user_id, delivery_id-->
    <!--from orders-->
    <!--where user_id = #{userId}-->
    <!--and delivery_id is null-->
  <!--</select>-->

  <!-- 根据用户id获取未完成订单 -->
  <select id="selectUncompletedOrdersByUserId" parameterType="java.lang.Integer" resultType="OrdersPojo">
    select o.id, realname as customerName, address_name, name as cement_name, unit_price, num, created_time, delivery_id
    from orders o, user u, address a, cement c
    where o.delivery_id is null
    and o.customer_id = u.id
    and o.address_id = a.id
    and o.cement_id = c.id
    and o.user_id = #{userId}
    order by created_time desc
  </select>

  <!-- 根据用户id和客户id获取订单 -->
  <select id="selectOrdersByUserIdAndCustomerId" resultMap="OrdersDetailMap">
    select id, customer_id, address_id, cement_id, unit_price, num, created_time, user_id, delivery_id
    from orders
    where user_id = #{userId}
    and customer_id = #{customerId}
  </select>

  <!-- 根据发货记录id获取订单 -->
  <select id="selectAllOrdersByDeliveryId" parameterType="java.lang.Integer" resultType="OrdersPojo">
    select o.id, realname as customerName, address_name, name as cement_name, unit_price, num, created_time, delivery_id
    from orders o, user u, address a, cement c
    where o.customer_id = u.id
    and o.address_id = a.id
    and o.cement_id = c.id
    and o.delivery_id = #{deliveryId}
    order by created_time desc
  </select>

  <!-- 设置订单所属发货记录 -->
  <select id="updateDeliveryIdByOrderId">
  update orders
  set delivery_id = #{deliveryId}
  where id = #{id}
  </select>


  <!-- 根据搜索条件获取订单 -->
  <select id="selectBySearchParam" resultType="OrdersPojo">
    select o.id, realname as customerName, address_name as address_name, name as cement_name, unit_price , num, created_time, delivery_id
    from orders o, user u, address a, cement c
    where o.customer_id = u.id
    and o.address_id = a.id
    and o.cement_id = c.id
    and o.user_id = #{userId}

    /* 范围 1 表示已完成 2表示未完成*/
    <if test="scope != null">
      <choose>
        <when test="scope == 1">
          and o.delivery_id is not null
        </when>
        <when test="scope == 2">
          and o.delivery_id is null
        </when>
      </choose>
    </if>

    /* 起始日期*/
    <choose>
      <when test="fromDate != null and toDate != null">
        and created_time between #{fromDate} and #{toDate}
      </when>
      <when test="fromDate == null and toDate != null">
        and createdtime &lt; #{toDate}
      </when>
      <when test="fromDate != null and toDate == null">
        and created_time > #{fromDate}
      </when>
    </choose>

    /* 用户姓名*/
    <if test="realname != null and realname != ''">
      and realname like concat('%', #{realname}, '%')
    </if>
    /* 收货地址*/
    <if test="addressName != null and addressName != ''">
      and address_name like concat('%', #{addressName}, '%')
    </if>

    order by created_time desc
  </select>
</mapper>